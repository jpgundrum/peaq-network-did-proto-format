// This file is generated by rust-protobuf 3.0.0-alpha.10. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `did_document_format.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_10;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:document.VerificationMethod)
pub struct VerificationMethod {
    // message fields
    // @@protoc_insertion_point(field:document.VerificationMethod.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:document.VerificationMethod.type)
    pub field_type: ::protobuf::EnumOrUnknown<VerificationType>,
    // @@protoc_insertion_point(field:document.VerificationMethod.controller)
    pub controller: ::std::string::String,
    // @@protoc_insertion_point(field:document.VerificationMethod.publicKeyMultibase)
    pub publicKeyMultibase: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:document.VerificationMethod.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VerificationMethod {
    fn default() -> &'a VerificationMethod {
        <VerificationMethod as ::protobuf::Message>::default_instance()
    }
}

impl VerificationMethod {
    pub fn new() -> VerificationMethod {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &VerificationMethod| { &m.id },
            |m: &mut VerificationMethod| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &VerificationMethod| { &m.field_type },
            |m: &mut VerificationMethod| { &mut m.field_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "controller",
            |m: &VerificationMethod| { &m.controller },
            |m: &mut VerificationMethod| { &mut m.controller },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "publicKeyMultibase",
            |m: &VerificationMethod| { &m.publicKeyMultibase },
            |m: &mut VerificationMethod| { &mut m.publicKeyMultibase },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<VerificationMethod>(
            "VerificationMethod",
            fields,
        )
    }
}

impl ::protobuf::Message for VerificationMethod {
    const NAME: &'static str = "VerificationMethod";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.field_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.controller = is.read_string()?;
                },
                34 => {
                    self.publicKeyMultibase = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.field_type != ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.field_type);
        }
        if !self.controller.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.controller);
        }
        if !self.publicKeyMultibase.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.publicKeyMultibase);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.field_type != ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.field_type))?;
        }
        if !self.controller.is_empty() {
            os.write_string(3, &self.controller)?;
        }
        if !self.publicKeyMultibase.is_empty() {
            os.write_string(4, &self.publicKeyMultibase)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> VerificationMethod {
        VerificationMethod::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.field_type = ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020);
        self.controller.clear();
        self.publicKeyMultibase.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VerificationMethod {
        static instance: VerificationMethod = VerificationMethod {
            id: ::std::string::String::new(),
            field_type: ::protobuf::EnumOrUnknown::from_i32(0),
            controller: ::std::string::String::new(),
            publicKeyMultibase: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VerificationMethod {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VerificationMethod").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VerificationMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerificationMethod {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:document.Signature)
pub struct Signature {
    // message fields
    // @@protoc_insertion_point(field:document.Signature.type)
    pub field_type: ::protobuf::EnumOrUnknown<VerificationType>,
    // @@protoc_insertion_point(field:document.Signature.issuer)
    pub issuer: ::std::string::String,
    // @@protoc_insertion_point(field:document.Signature.hash)
    pub hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:document.Signature.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Signature {
    fn default() -> &'a Signature {
        <Signature as ::protobuf::Message>::default_instance()
    }
}

impl Signature {
    pub fn new() -> Signature {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Signature| { &m.field_type },
            |m: &mut Signature| { &mut m.field_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "issuer",
            |m: &Signature| { &m.issuer },
            |m: &mut Signature| { &mut m.issuer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Signature| { &m.hash },
            |m: &mut Signature| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Signature>(
            "Signature",
            fields,
        )
    }
}

impl ::protobuf::Message for Signature {
    const NAME: &'static str = "Signature";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.field_type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.issuer = is.read_string()?;
                },
                26 => {
                    self.hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.field_type != ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.field_type);
        }
        if !self.issuer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.issuer);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.field_type != ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.field_type))?;
        }
        if !self.issuer.is_empty() {
            os.write_string(2, &self.issuer)?;
        }
        if !self.hash.is_empty() {
            os.write_string(3, &self.hash)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Signature {
        Signature::new()
    }

    fn clear(&mut self) {
        self.field_type = ::protobuf::EnumOrUnknown::new(VerificationType::Ed25519VerificationKey2020);
        self.issuer.clear();
        self.hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Signature {
        static instance: Signature = Signature {
            field_type: ::protobuf::EnumOrUnknown::from_i32(0),
            issuer: ::std::string::String::new(),
            hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Signature {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Signature").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Signature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signature {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:document.Metadata)
pub struct Metadata {
    // message fields
    // @@protoc_insertion_point(field:document.Metadata.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:document.Metadata.power)
    pub power: ::std::string::String,
    // @@protoc_insertion_point(field:document.Metadata.status)
    pub status: ::protobuf::EnumOrUnknown<Status>,
    // @@protoc_insertion_point(field:document.Metadata.chargePointClientId)
    pub chargePointClientId: ::std::string::String,
    // @@protoc_insertion_point(field:document.Metadata.connectorsCount)
    pub connectorsCount: i32,
    // @@protoc_insertion_point(field:document.Metadata.plugType)
    pub plugType: ::std::string::String,
    // @@protoc_insertion_point(field:document.Metadata.pricePerKWHR)
    pub pricePerKWHR: f32,
    // special fields
    // @@protoc_insertion_point(special_field:document.Metadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Metadata| { &m.name },
            |m: &mut Metadata| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "power",
            |m: &Metadata| { &m.power },
            |m: &mut Metadata| { &mut m.power },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &Metadata| { &m.status },
            |m: &mut Metadata| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chargePointClientId",
            |m: &Metadata| { &m.chargePointClientId },
            |m: &mut Metadata| { &mut m.chargePointClientId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connectorsCount",
            |m: &Metadata| { &m.connectorsCount },
            |m: &mut Metadata| { &mut m.connectorsCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "plugType",
            |m: &Metadata| { &m.plugType },
            |m: &mut Metadata| { &mut m.plugType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pricePerKWHR",
            |m: &Metadata| { &m.pricePerKWHR },
            |m: &mut Metadata| { &mut m.pricePerKWHR },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Metadata>(
            "Metadata",
            fields,
        )
    }
}

impl ::protobuf::Message for Metadata {
    const NAME: &'static str = "Metadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.power = is.read_string()?;
                },
                24 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.chargePointClientId = is.read_string()?;
                },
                40 => {
                    self.connectorsCount = is.read_int32()?;
                },
                50 => {
                    self.plugType = is.read_string()?;
                },
                61 => {
                    self.pricePerKWHR = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.power.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.power);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(Status::AVAILABLE) {
            my_size += ::protobuf::rt::enum_or_unknown_size(3, self.status);
        }
        if !self.chargePointClientId.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.chargePointClientId);
        }
        if self.connectorsCount != 0 {
            my_size += ::protobuf::rt::value_size(5, self.connectorsCount, ::protobuf::rt::WireType::Varint);
        }
        if !self.plugType.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.plugType);
        }
        if self.pricePerKWHR != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.power.is_empty() {
            os.write_string(2, &self.power)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(Status::AVAILABLE) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if !self.chargePointClientId.is_empty() {
            os.write_string(4, &self.chargePointClientId)?;
        }
        if self.connectorsCount != 0 {
            os.write_int32(5, self.connectorsCount)?;
        }
        if !self.plugType.is_empty() {
            os.write_string(6, &self.plugType)?;
        }
        if self.pricePerKWHR != 0. {
            os.write_float(7, self.pricePerKWHR)?;
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.power.clear();
        self.status = ::protobuf::EnumOrUnknown::new(Status::AVAILABLE);
        self.chargePointClientId.clear();
        self.connectorsCount = 0;
        self.plugType.clear();
        self.pricePerKWHR = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Metadata {
        static instance: Metadata = Metadata {
            name: ::std::string::String::new(),
            power: ::std::string::String::new(),
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            chargePointClientId: ::std::string::String::new(),
            connectorsCount: 0,
            plugType: ::std::string::String::new(),
            pricePerKWHR: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Metadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Metadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:document.Service)
pub struct Service {
    // message fields
    // @@protoc_insertion_point(field:document.Service.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:document.Service.type)
    pub field_type: ::protobuf::EnumOrUnknown<ServiceType>,
    // message oneof groups
    pub serviceEndpoint: ::std::option::Option<service::ServiceEndpoint>,
    // special fields
    // @@protoc_insertion_point(special_field:document.Service.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Service {
    fn default() -> &'a Service {
        <Service as ::protobuf::Message>::default_instance()
    }
}

impl Service {
    pub fn new() -> Service {
        ::std::default::Default::default()
    }

    // string stringData = 3;

    pub fn stringData(&self) -> &str {
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::StringData(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_stringData(&mut self) {
        self.serviceEndpoint = ::std::option::Option::None;
    }

    pub fn has_stringData(&self) -> bool {
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::StringData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stringData(&mut self, v: ::std::string::String) {
        self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::StringData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stringData(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(service::ServiceEndpoint::StringData(_)) = self.serviceEndpoint {
        } else {
            self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::StringData(::std::string::String::new()));
        }
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::StringData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stringData(&mut self) -> ::std::string::String {
        if self.has_stringData() {
            match self.serviceEndpoint.take() {
                ::std::option::Option::Some(service::ServiceEndpoint::StringData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .document.Metadata metadata = 4;

    pub fn metadata(&self) -> &Metadata {
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::Metadata(ref v)) => v,
            _ => <Metadata as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_metadata(&mut self) {
        self.serviceEndpoint = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::Metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: Metadata) {
        self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::Metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut Metadata {
        if let ::std::option::Option::Some(service::ServiceEndpoint::Metadata(_)) = self.serviceEndpoint {
        } else {
            self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::Metadata(Metadata::new()));
        }
        match self.serviceEndpoint {
            ::std::option::Option::Some(service::ServiceEndpoint::Metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metadata(&mut self) -> Metadata {
        if self.has_metadata() {
            match self.serviceEndpoint.take() {
                ::std::option::Option::Some(service::ServiceEndpoint::Metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            Metadata::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Service| { &m.id },
            |m: &mut Service| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Service| { &m.field_type },
            |m: &mut Service| { &mut m.field_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "stringData",
            Service::has_stringData,
            Service::stringData,
            Service::set_stringData,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Metadata>(
            "metadata",
            Service::has_metadata,
            Service::metadata,
            Service::mut_metadata,
            Service::set_metadata,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Service>(
            "Service",
            fields,
        )
    }
}

impl ::protobuf::Message for Service {
    const NAME: &'static str = "Service";

    fn is_initialized(&self) -> bool {
        if let Some(service::ServiceEndpoint::Metadata(ref v)) = self.serviceEndpoint {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.field_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::StringData(is.read_string()?));
                },
                34 => {
                    self.serviceEndpoint = ::std::option::Option::Some(service::ServiceEndpoint::Metadata(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.field_type != ::protobuf::EnumOrUnknown::new(ServiceType::p2p) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.serviceEndpoint {
            match v {
                &service::ServiceEndpoint::StringData(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &service::ServiceEndpoint::Metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.field_type != ::protobuf::EnumOrUnknown::new(ServiceType::p2p) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.field_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.serviceEndpoint {
            match v {
                &service::ServiceEndpoint::StringData(ref v) => {
                    os.write_string(3, v)?;
                },
                &service::ServiceEndpoint::Metadata(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Service {
        Service::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.field_type = ::protobuf::EnumOrUnknown::new(ServiceType::p2p);
        self.serviceEndpoint = ::std::option::Option::None;
        self.serviceEndpoint = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Service {
        static instance: Service = Service {
            id: ::std::string::String::new(),
            field_type: ::protobuf::EnumOrUnknown::from_i32(0),
            serviceEndpoint: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Service {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Service").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Service {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Service {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Service`
pub mod service {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:document.Service.serviceEndpoint)
    pub enum ServiceEndpoint {
        // @@protoc_insertion_point(oneof_field:document.Service.stringData)
        StringData(::std::string::String),
        // @@protoc_insertion_point(oneof_field:document.Service.metadata)
        Metadata(super::Metadata),
    }

    impl ::protobuf::Oneof for ServiceEndpoint {
    }

    impl ::protobuf::OneofFull for ServiceEndpoint {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Service as ::protobuf::MessageFull>::descriptor().oneof_by_name("serviceEndpoint").unwrap()).clone()
        }
    }

    impl ServiceEndpoint {
        fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new_2::<ServiceEndpoint>("Service.serviceEndpoint", 1234567)
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:document.Document)
pub struct Document {
    // message fields
    // @@protoc_insertion_point(field:document.Document.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:document.Document.controller)
    pub controller: ::std::string::String,
    // @@protoc_insertion_point(field:document.Document.verificationMethods)
    pub verificationMethods: ::std::vec::Vec<VerificationMethod>,
    // @@protoc_insertion_point(field:document.Document.signature)
    pub signature: ::protobuf::MessageField<Signature>,
    // @@protoc_insertion_point(field:document.Document.services)
    pub services: ::std::vec::Vec<Service>,
    // @@protoc_insertion_point(field:document.Document.authentications)
    pub authentications: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:document.Document.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Document {
    fn default() -> &'a Document {
        <Document as ::protobuf::Message>::default_instance()
    }
}

impl Document {
    pub fn new() -> Document {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Document| { &m.id },
            |m: &mut Document| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "controller",
            |m: &Document| { &m.controller },
            |m: &mut Document| { &mut m.controller },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "verificationMethods",
            |m: &Document| { &m.verificationMethods },
            |m: &mut Document| { &mut m.verificationMethods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Signature>(
            "signature",
            |m: &Document| { &m.signature },
            |m: &mut Document| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "services",
            |m: &Document| { &m.services },
            |m: &mut Document| { &mut m.services },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "authentications",
            |m: &Document| { &m.authentications },
            |m: &mut Document| { &mut m.authentications },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new::<Document>(
            "Document",
            fields,
        )
    }
}

impl ::protobuf::Message for Document {
    const NAME: &'static str = "Document";

    fn is_initialized(&self) -> bool {
        for v in &self.verificationMethods {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.services {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.controller = is.read_string()?;
                },
                26 => {
                    self.verificationMethods.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature)?;
                },
                42 => {
                    self.services.push(is.read_message()?);
                },
                50 => {
                    self.authentications.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.controller.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.controller);
        }
        for value in &self.verificationMethods {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.services {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.authentications {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.controller.is_empty() {
            os.write_string(2, &self.controller)?;
        }
        for v in &self.verificationMethods {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.signature.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        for v in &self.services {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.authentications {
            os.write_string(6, &v)?;
        };
        os.write_unknown_fields(self.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn cached_size(&self) -> u32 {
        self.special_fields.cached_size().get()
    }

    fn unknown_fields(&self) -> &::protobuf::UnknownFields {
        self.special_fields.unknown_fields()
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        self.special_fields.mut_unknown_fields()
    }

    fn new() -> Document {
        Document::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.controller.clear();
        self.verificationMethods.clear();
        self.signature.clear();
        self.services.clear();
        self.authentications.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Document {
        static instance: Document = Document {
            id: ::std::string::String::new(),
            controller: ::std::string::String::new(),
            verificationMethods: ::std::vec::Vec::new(),
            signature: ::protobuf::MessageField::none(),
            services: ::std::vec::Vec::new(),
            authentications: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Document {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Document").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Document {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Document {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:document.ServiceType)
pub enum ServiceType {
    // @@protoc_insertion_point(enum_value:document.ServiceType.p2p)
    p2p = 0,
    // @@protoc_insertion_point(enum_value:document.ServiceType.payment)
    payment = 1,
    // @@protoc_insertion_point(enum_value:document.ServiceType.metadata)
    metadata = 2,
}

impl ::protobuf::Enum for ServiceType {
    const NAME: &'static str = "ServiceType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServiceType> {
        match value {
            0 => ::std::option::Option::Some(ServiceType::p2p),
            1 => ::std::option::Option::Some(ServiceType::payment),
            2 => ::std::option::Option::Some(ServiceType::metadata),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ServiceType] = &[
        ServiceType::p2p,
        ServiceType::payment,
        ServiceType::metadata,
    ];
}

impl ::protobuf::EnumFull for ServiceType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ServiceType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ServiceType {
    fn default() -> Self {
        ServiceType::p2p
    }
}

impl ServiceType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServiceType>("ServiceType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:document.Status)
pub enum Status {
    // @@protoc_insertion_point(enum_value:document.Status.AVAILABLE)
    AVAILABLE = 0,
    // @@protoc_insertion_point(enum_value:document.Status.UNAVAILABLE)
    UNAVAILABLE = 1,
}

impl ::protobuf::Enum for Status {
    const NAME: &'static str = "Status";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::AVAILABLE),
            1 => ::std::option::Option::Some(Status::UNAVAILABLE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Status] = &[
        Status::AVAILABLE,
        Status::UNAVAILABLE,
    ];
}

impl ::protobuf::EnumFull for Status {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Status").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::AVAILABLE
    }
}

impl Status {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("Status")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:document.VerificationType)
pub enum VerificationType {
    // @@protoc_insertion_point(enum_value:document.VerificationType.Ed25519VerificationKey2020)
    Ed25519VerificationKey2020 = 0,
    // @@protoc_insertion_point(enum_value:document.VerificationType.Sr25519VerificationKey2020)
    Sr25519VerificationKey2020 = 1,
}

impl ::protobuf::Enum for VerificationType {
    const NAME: &'static str = "VerificationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VerificationType> {
        match value {
            0 => ::std::option::Option::Some(VerificationType::Ed25519VerificationKey2020),
            1 => ::std::option::Option::Some(VerificationType::Sr25519VerificationKey2020),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [VerificationType] = &[
        VerificationType::Ed25519VerificationKey2020,
        VerificationType::Sr25519VerificationKey2020,
    ];
}

impl ::protobuf::EnumFull for VerificationType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("VerificationType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for VerificationType {
    fn default() -> Self {
        VerificationType::Ed25519VerificationKey2020
    }
}

impl VerificationType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<VerificationType>("VerificationType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19did_document_format.proto\x12\x08document\"\xa4\x01\n\x12Verificat\
    ionMethod\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12.\n\x04type\x18\
    \x02\x20\x01(\x0e2\x1a.document.VerificationTypeR\x04type\x12\x1e\n\ncon\
    troller\x18\x03\x20\x01(\tR\ncontroller\x12.\n\x12publicKeyMultibase\x18\
    \x04\x20\x01(\tR\x12publicKeyMultibase\"g\n\tSignature\x12.\n\x04type\
    \x18\x01\x20\x01(\x0e2\x1a.document.VerificationTypeR\x04type\x12\x16\n\
    \x06issuer\x18\x02\x20\x01(\tR\x06issuer\x12\x12\n\x04hash\x18\x03\x20\
    \x01(\tR\x04hash\"\xfa\x01\n\x08Metadata\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x14\n\x05power\x18\x02\x20\x01(\tR\x05power\x12(\n\
    \x06status\x18\x03\x20\x01(\x0e2\x10.document.StatusR\x06status\x120\n\
    \x13chargePointClientId\x18\x04\x20\x01(\tR\x13chargePointClientId\x12(\
    \n\x0fconnectorsCount\x18\x05\x20\x01(\x05R\x0fconnectorsCount\x12\x1a\n\
    \x08plugType\x18\x06\x20\x01(\tR\x08plugType\x12\"\n\x0cpricePerKWHR\x18\
    \x07\x20\x01(\x02R\x0cpricePerKWHR\"\xab\x01\n\x07Service\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\tR\x02id\x12)\n\x04type\x18\x02\x20\x01(\x0e2\x15.doc\
    ument.ServiceTypeR\x04type\x12\x20\n\nstringData\x18\x03\x20\x01(\tH\0R\
    \nstringData\x120\n\x08metadata\x18\x04\x20\x01(\x0b2\x12.document.Metad\
    ataH\0R\x08metadataB\x11\n\x0fserviceEndpoint\"\x96\x02\n\x08Document\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1e\n\ncontroller\x18\x02\
    \x20\x01(\tR\ncontroller\x12N\n\x13verificationMethods\x18\x03\x20\x03(\
    \x0b2\x1c.document.VerificationMethodR\x13verificationMethods\x121\n\tsi\
    gnature\x18\x04\x20\x01(\x0b2\x13.document.SignatureR\tsignature\x12-\n\
    \x08services\x18\x05\x20\x03(\x0b2\x11.document.ServiceR\x08services\x12\
    (\n\x0fauthentications\x18\x06\x20\x03(\tR\x0fauthentications*1\n\x0bSer\
    viceType\x12\x07\n\x03p2p\x10\0\x12\x0b\n\x07payment\x10\x01\x12\x0c\n\
    \x08metadata\x10\x02*(\n\x06Status\x12\r\n\tAVAILABLE\x10\0\x12\x0f\n\
    \x0bUNAVAILABLE\x10\x01*R\n\x10VerificationType\x12\x1e\n\x1aEd25519Veri\
    ficationKey2020\x10\0\x12\x1e\n\x1aSr25519VerificationKey2020\x10\x01BYZ\
    Wgithub.com/peaqnetwork/peaq-network-ev-charging-message-format/golang/d\
    ocument;documentJ\xfe\x0e\n\x06\x12\x04\0\0<\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n\x08\n\x01\x08\x12\x03\x03\0\
    n\n\t\n\x02\x08\x0b\x12\x03\x03\0n\n\n\n\x02\x05\0\x12\x04\x05\0\t\x01\n\
    \n\n\x03\x05\0\x01\x12\x03\x05\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\
    \x06\x02\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x02\x05\n\x0c\n\x05\
    \x05\0\x02\0\x02\x12\x03\x06\x08\t\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\x02\t\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03\x07\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\
    \x02\x0f\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x08\x02\n\n\x0c\n\x05\x05\
    \0\x02\x02\x02\x12\x03\x08\r\x0e\n\n\n\x02\x05\x01\x12\x04\x0b\0\x0e\x01\
    \n\n\n\x03\x05\x01\x01\x12\x03\x0b\x05\x0b\n\x0b\n\x04\x05\x01\x02\0\x12\
    \x03\x0c\x02\x10\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x0c\x02\x0b\n\x0c\
    \n\x05\x05\x01\x02\0\x02\x12\x03\x0c\x0e\x0f\n\x0b\n\x04\x05\x01\x02\x01\
    \x12\x03\r\x02\x12\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\r\x02\r\n\x0c\
    \n\x05\x05\x01\x02\x01\x02\x12\x03\r\x10\x11\n\n\n\x02\x05\x02\x12\x04\
    \x10\0\x13\x01\n\n\n\x03\x05\x02\x01\x12\x03\x10\x05\x15\n\x0b\n\x04\x05\
    \x02\x02\0\x12\x03\x11\x02!\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x11\
    \x02\x1c\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\x11\x1f\x20\n\x0b\n\x04\
    \x05\x02\x02\x01\x12\x03\x12\x02!\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\
    \x03\x12\x02\x1c\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x12\x1f\x20\n\n\
    \n\x02\x04\0\x12\x04\x15\0\x1a\x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\
    \x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03\x16\x02\x10\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x16\t\x0b\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x16\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x17\x02\x1c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x17\x02\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x17\x13\x17\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x17\x1a\x1b\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x18\x02\
    \x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x18\t\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x18\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x19\x02\x20\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x19\t\x1b\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x19\x1e\x1f\n\n\n\x02\
    \x04\x01\x12\x04\x1c\0\x20\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1c\x08\x11\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1d\x02\x1c\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x1d\x02\x12\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1d\x13\
    \x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1d\x1a\x1b\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x1e\x02\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\
    \x1e\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1e\t\x0f\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x1e\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\
    \x12\x03\x1f\x02\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x1f\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x1f\t\r\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x1f\x10\x11\n\n\n\x02\x04\x02\x12\x04\"\0*\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\"\x08\x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03#\
    \x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03#\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03#\x10\
    \x11\n\x0b\n\x04\x04\x02\x02\x01\x12\x03$\x02\x13\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03$\t\
    \x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03$\x11\x12\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03%\x02\x14\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03%\
    \x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03%\t\x0f\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03%\x12\x13\n\x0b\n\x04\x04\x02\x02\x03\x12\x03&\
    \x02!\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03&\t\x1c\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03&\
    \x1f\x20\n\x0b\n\x04\x04\x02\x02\x04\x12\x03'\x02\x1c\n\x0c\n\x05\x04\
    \x02\x02\x04\x05\x12\x03'\x02\x07\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\
    \x03'\x08\x17\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03'\x1a\x1b\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03(\x02\x16\n\x0c\n\x05\x04\x02\x02\x05\x05\
    \x12\x03(\x02\x08\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03(\t\x11\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03(\x14\x15\n\x0b\n\x04\x04\x02\x02\x06\
    \x12\x03)\x02\x19\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03)\x02\x07\n\x0c\
    \n\x05\x04\x02\x02\x06\x01\x12\x03)\x08\x14\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03)\x17\x18\n\n\n\x02\x04\x03\x12\x04,\03\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03,\x08\x0f\n\x0b\n\x04\x04\x03\x02\0\x12\x03-\x02\x10\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03-\t\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03-\x0e\x0f\n\x0b\
    \n\x04\x04\x03\x02\x01\x12\x03.\x02\x17\n\x0c\n\x05\x04\x03\x02\x01\x06\
    \x12\x03.\x02\r\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03.\x0e\x12\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03.\x15\x16\n\x0c\n\x04\x04\x03\x08\0\x12\
    \x04/\x022\x03\n\x0c\n\x05\x04\x03\x08\0\x01\x12\x03/\x08\x17\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x030\x04\x1a\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x030\x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x030\x0b\x15\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x030\x18\x19\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x031\x04\x1a\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\x031\x04\x0c\n\x0c\
    \n\x05\x04\x03\x02\x03\x01\x12\x031\r\x15\n\x0c\n\x05\x04\x03\x02\x03\
    \x03\x12\x031\x18\x19\n\n\n\x02\x04\x04\x12\x045\0<\x01\n\n\n\x03\x04\
    \x04\x01\x12\x035\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x036\x02\x10\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x036\x02\x08\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x036\t\x0b\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x036\x0e\x0f\n\x0b\
    \n\x04\x04\x04\x02\x01\x12\x037\x02\x18\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x037\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x037\t\x13\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x037\x16\x17\n\x0b\n\x04\x04\x04\x02\x02\
    \x12\x038\x026\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x038\x02\n\n\x0c\n\
    \x05\x04\x04\x02\x02\x06\x12\x038\x0b\x1d\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x038\x1e1\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03845\n\x0b\n\
    \x04\x04\x04\x02\x03\x12\x039\x02\x1a\n\x0c\n\x05\x04\x04\x02\x03\x06\
    \x12\x039\x02\x0b\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x039\x0c\x15\n\x0c\
    \n\x05\x04\x04\x02\x03\x03\x12\x039\x18\x19\n\x0b\n\x04\x04\x04\x02\x04\
    \x12\x03:\x02\x20\n\x0c\n\x05\x04\x04\x02\x04\x04\x12\x03:\x02\n\n\x0c\n\
    \x05\x04\x04\x02\x04\x06\x12\x03:\x0b\x12\n\x0c\n\x05\x04\x04\x02\x04\
    \x01\x12\x03:\x13\x1b\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x03:\x1e\x1f\n\
    \x0b\n\x04\x04\x04\x02\x05\x12\x03;\x02&\n\x0c\n\x05\x04\x04\x02\x05\x04\
    \x12\x03;\x02\n\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x03;\x0b\x11\n\x0c\n\
    \x05\x04\x04\x02\x05\x01\x12\x03;\x12!\n\x0c\n\x05\x04\x04\x02\x05\x03\
    \x12\x03;$%b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::with_capacity(0);
        let mut messages = ::std::vec::Vec::with_capacity(5);
        messages.push(VerificationMethod::generated_message_descriptor_data());
        messages.push(Signature::generated_message_descriptor_data());
        messages.push(Metadata::generated_message_descriptor_data());
        messages.push(Service::generated_message_descriptor_data());
        messages.push(Document::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::with_capacity(3);
        enums.push(ServiceType::generated_enum_descriptor_data());
        enums.push(Status::generated_enum_descriptor_data());
        enums.push(VerificationType::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
